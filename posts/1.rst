.. title: Deploying a static website on S3 with an SSL certificate using the AWS DevOps toolchain
.. slug: static-s3-cloudformation
.. date: 2018-07-10
.. tags: aws, s3, static, cloudformation, devops
.. author: Jonathan Pelletier
.. description: tutorial on how to deploy, using cloudformation,  a static website using an AWS S3 bucket with an SSL certificate
.. category: technology
.. link: https://github.com/jomagnus1984/statics3website

.. figure:: /images/blog_post_s3.png
   :target: /images/blog_post_s3.png
   :class: thumbnail
   :alt: Deploying a static website DevOps style

AWS S3 makes it really easy to host a website composed entirely of static 
assets. This is especially well suited for hosting the output of static 
websites generators such as `jekyll <https://jekyllrb.com/>`_, 
`nikola <https://getnikola.com/>`_ or `gatsby <https://www.gatsbyjs.org/>`_. 
In this tutorial, I will show you how you can deploy your static website on S3 
with an SSL certificate created in Certificate Manager.  I will be using this 
blog as a use case and show you how you can leverage AWS tools such as 
CloudFormation, CodeBuild and CodePipeline to completely automate the 
deployment of new content to as many environment as you like. 
Let's get started !

Objective and tasks breakdown
-----------------------------
Our objective at the end of this tutorial will be to have our end users access 
a website using https. we will also want fully automated deployments of new 
content, so that publishing is triggered by a simple commit. We will break down 
the tasks of this tutorial in 3 parts:

1. Prerequisite.
2. Infrastructure.
3. DevOps pipeline.

In the Prerequisite section, we will focus on obtaining a certificate for
our website from AWS Certificate Manager.

In the infrastructure section, we will present the architecture required to
support our static website. We will be using a CloudFormation template
to specify resources and deploy our website.

Finally, in the DevOps pipeline section, we will create a pipeline that 
automatically triggers an update of our website upon a commit on the MASTER
branch of our site repository.

The CloudFormation templates used in this tutorial are all available on 
`github <https://github.com>`_ .

Prerequisite
------------
https requires you to have a certificate issued by a certificate authority
in order to operate properly. Here we will be requesting a certificate from
AWS Certificate Manager for a domain name managed in AWS Route 53. 

In order to get a certificate, we will need to prove that we own the domain.
We do this by showing certificate manager we have control over the resource. 
AWS Certificate Manager allows you to prove control in two ways:

1. Email verification of ownership.
2. DNS verification.

In this post we will use DNS verification.

How does DNS verification works ?
+++++++++++++++++++++++++++++++++
Assuming you own the domain name hedgenet.info and would like to have a 
certificate covering the following domains:

1. hedgenet.info.
2. mysubdomain.hedgenet.info.

Certificate Manager will require you to create an additional subdomain for 
every domains in the requests. Here is a picture showing what we need to do:

.. figure:: /images/dns_validation.png
   :target: /images/dns_validation.png
   :class: thumbnail
   :alt: CNAME records to create

   CNAME records to create in Route 53.

If we are able to create the subdomains Certificate Manager requests,
then this means we have control over them and our certificate can be issued.

Once you understand how verification operates, you can just turn the crank and 
carry out the steps through the aws console. I will briefly mentions the steps 
required to have our certificate issued:

1. login to the aws console `here <https://console.aws.amazon.com>`_.
2. go to Certificate Manager and choose *request a public certificate*.
3. add the domain names for which you need a certificate.
4. download the .csv file generated by Certificate Manager; it contains the records you will have to create in Route 53.
5. head over to Route 53 and create the CNAME found in your .csv file.

Once you are done, allow a few minutes for Certificate Manager to verify your
domains ownership. I have done this in my AWS account for hedgenet.info. What
you end up with at the end of the verification process should look like this
in Certificate Manager:

.. figure:: /images/hedgenet_certificate.png
   :target: /images/hedgenet_certificate.png
   :class: thumbnail
   :alt: Certificate Manager and a Verified Domain

   Certificate Manager after a successful issuance.

This step is done only once, so it is acceptable to do it manually.

With our certificate in hand, we can now move on to a discussion about the
necessary infrastructure components for our website and how to deploy it.

Infrastructure
--------------
If https was not one of our requirements, we would only need an S3 bucket and
a bit of Route 53 config for our hosting solution. To serve our content over
https, we will need to use CloudFront; a global Content Delivery Network.
Here is the architecture we will be deploying:

.. figure:: /images/static_s3_architecture.svg
   :target: /images/static_s3_architecture.svg
   :class: thumbnail
   :alt: The tutorial Architecture

   The static website architecture we will deploy.

Our enduser will know our domain name (e.g hedgenet.info) and type
https://hedgenet.info/ in their browser. The browser will end up making a 
request to Route 53 which will point to a CloudFront distribution. The 
distribution will be configured to use our previously created certificate and 
will serve the content from an S3 bucket.

Since we want to deploy automatically, we will want to use a cloudformation
template in order to specify our resources and how they interact with each 
other. 

I've already gone through the trouble of creating such a template for you. The
template just formaly encodes, using a json/yaml schema, what we have already described 
in our architecture diagram. It will admitedly force you to specify every details required
for a successful deployment. Writing CloudFormation template may seem tedious 
and overwhelming, but you should always remember that, at it's core, it is 
really simple. It is just a matter of knowing the resources you need, having 
the documentation nearby and turning the crank. Since the idea of this tutorial is to focus
on the DevOps component rather then the details of the CloudFormation template, I will not go
through it here but link to a copy of it on github. Anyways, you can find the 
template in the `repo here <https://github.com>`_. 

We are now ready to move on to the main course of this tutorial, the DevOps Pipeline

DevOps pipeline
---------------
the DevOps pipeline will allow us to automatically deploy our new website content
onto the infrastructure we have specified in our CloudFormation template. Upon a commit
on the MASTER branch of our website repository, we want the following things to happen:

1. create/update the infrastructure necessary for the hosting of the website.
2. build the static assets to be deployed deployed onto the infrastructure.
3. upload the static assets onto the S3 bucket created in the infrastructure.

